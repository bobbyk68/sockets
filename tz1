import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Component;
import java.io.IOException;

@Component
public class PutRequestFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;

        // Only wrap for PUT requests
        if ("PUT".equalsIgnoreCase(httpRequest.getMethod())) {
            CustomHttpServletRequestWrapper wrappedRequest = new CustomHttpServletRequestWrapper(httpRequest);
            
            // Here you can validate the payload or log it
            String payload = wrappedRequest.getBody();
            System.out.println("Payload in filter: " + payload);

            // Pass the wrapped request to the filter chain
            chain.doFilter(wrappedRequest, response);
        } else {
            // For other HTTP methods, proceed without wrapping
            chain.doFilter(request, response);
        }
    }

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // No specific initialization required
    }

    @Override
    public void destroy() {
        // No specific destruction actions required
    }
}