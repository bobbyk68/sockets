import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(controllers = TestController.class)
class GlobalExceptionHandlerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private TestController testController;

    @Test
    void testHandleInvalidJsonException() throws Exception {
        // Simulate InvalidJsonException thrown by the controller
        when(testController.getTestResponse()).thenThrow(new InvalidJsonException("{ \"badJson\": true }"));

        mockMvc.perform(get("/test"))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.status").value("error"))
                .andExpect(jsonPath("$.message").value("Invalid JSON detected in response"))
                .andExpect(jsonPath("$.originalPayload").value("{ \"badJson\": true }"));
    }

    @Test
    void testHandleGenericException() throws Exception {
        // Simulate generic exception thrown by the controller
        when(testController.getTestResponse()).thenThrow(new RuntimeException("Unexpected error"));

        mockMvc.perform(get("/test"))
                .andExpect(status().isInternalServerError())
                .andExpect(jsonPath("$.status").value("error"))
                .andExpect(jsonPath("$.message").value("An unexpected error occurred"));
    }
}